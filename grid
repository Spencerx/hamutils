#!/usr/bin/perl -w

# Grid reference calculation.  2-clause BSD license.

# Copyright 2013 Chris Ruvolo (KC2SYK). All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice,
# 	this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice,
# 	this list of conditions and the following disclaimer in the
# 	documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY CHRIS RUVOLO ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL CHRIS RUVOLO OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of Chris Ruvolo.

use strict;
use utf8;
use feature 'unicode_strings';
use Math::Trig;
use Math::Trig 'great_circle_distance';
use Math::Trig 'great_circle_bearing';
use URI::Escape;
binmode(STDOUT, ":utf8");

# change this to 0 to always exit with success
our $exitnonzeroonerror = 1;

# change this to set the preferred method of terminal highlighting
#our $highlight="none";
#our $highlight="irc";
our $highlight="vt100";

our $mylat = undef;
our $mylon = undef;

my $loginfile = $ENV{'HOME'} . "/.qrzlogin";

if (-e ($loginfile)) {
  require($loginfile);
}

if ($#ARGV < 0 || length($ARGV[0]) == 0) {
  my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);

  if ($username eq 'eggdrop') {
    print "usage: !grid <grid>|<lat>,<lon>|<qth>\n";
  } else {
    print "usage: $0 <grid>|<lat>,<lon>|<qth>\n";
  }
  exit $exitnonzeroonerror;
}

my $query = undef;
my $type = undef;

my $i = 0;
while ($i <= $#ARGV) {
  if ($ARGV[$i] =~ /--geo/) {
    my $latlon = $ARGV[$i+1];
    if ($latlon =~ /^-?\d+\.\d+,-?\d+\.\d+$/) {
      ($mylat, $mylon) = split(',', $latlon);
      #print "lat: $mylat\tlon: $mylon\n";
    }
    $i += 2;
    next;
  }
  if (defined($query)) {
    $query = $query ." ". $ARGV[$i];
  } else {
    $query = $ARGV[$i];
  }
  $i++;
}

if ($query =~ /^(grid:)? ?([A-R]{2}[0-9]{2}([a-x]{2})?)/i) {
  $query = $2;
  $type = "grid";
} elsif ($query =~ /^(geo:)? ?([-+]?\d+(.\d+)?,[-+]?\d+(.\d+)?)/i) {
  $query = $2;
  $type = "geo";
} else {
  $type = "qth";
  #print "unknown input.\n";
  #exit $exitnonzeroonerror;
}

#print "query: $query\ntype: $type\n";


my $bold = "";
my $unbold = "";

if ($highlight eq "vt100") {
  $bold = "\e[1m";
  $unbold = "\e[0m";
} elsif ($highlight eq "irc" ) {
  $bold = "\002";
  $unbold = "\002";
}

my $lat = undef;
my $lon = undef;
my $grid = undef;

if ($type eq "grid") {
  $grid = $query;
} elsif ($type eq "geo") {
  ($lat, $lon) = split(',', $query);
} elsif ($type eq "qth") {
  my $ret = qthToCoords($query);
  if (!defined($ret)) {
    print "'$query' not found.\n";
    exit $exitnonzeroonerror;
  }
  ($lat, $lon) = split(',', $ret);
}

if (defined($grid)) {
  ($lat, $lon) = split(',', gridToCoord(uc($grid)));
} elsif (defined ($lat)) {
  $grid = coordToGrid($lat, $lon);
}

my $placename = geolocate($lat, $lon);

print "$bold$grid$unbold: $lat, $lon";
if (defined($placename)) {
  print ": $bold$placename$unbold";
}

if (defined($mylat)) {

  # convert to radians
  my @origin = NESW($mylon, $mylat);
  my @foreign = NESW($lon, $lat);
  my ($dist, $bearing);

  # disable "experimental" warning on smart match operator use
  no if $] >= 5.018, warnings => "experimental::smartmatch";

  if (@origin ~~ @foreign) {	  # smart match operator - equality comparison
    $dist = 0;
    $bearing = 0;
  } else {
    $dist = great_circle_distance(@origin, @foreign, 6378.1);
    $bearing = rad2deg(great_circle_bearing(@origin, @foreign));
  }
  my $localgrid = coordToGrid($mylat, $mylon);

  printf(" -- %.1f km, %.0fÂ° from %s", $dist, $bearing, $localgrid);
}
print "\n";

exit 0;

# Notice the 90 - latitude: phi zero is at the North Pole.
# Example: my @London = NESW( -0.5, 51.3); # (51.3N 0.5W)
# Example: my @Tokyo  = NESW(139.8, 35.7); # (35.7N 139.8E)
sub NESW {
  deg2rad($_[0]), deg2rad(90 - $_[1])
}

sub gridToCoord {
  my $gridstr = shift;

  if (not $gridstr =~ /^[A-R]{2}[0-9]{2}([A-X]{2})?/ ) {
    print "\ninvalid grid\n";
    return undef;
  }

  my @grid = split (//, uc($gridstr));

  if ($#grid < 3) {
    return undef;
  }

  my $lat;
  my $lon;
  my $formatter;

  $lon = ((ord($grid[0]) - ord('A')) * 20) - 180;
  $lat = ((ord($grid[1]) - ord('A')) * 10) - 90;
  $lon += ((ord($grid[2]) - ord('0')) * 2);
  $lat += ((ord($grid[3]) - ord('0')) * 1);

  if ($#grid >= 5) {
    $lon += ((ord($grid[4])) - ord('A')) * (5/60);
    $lat += ((ord($grid[5])) - ord('A')) * (5/120);
    # move to center of subsquare
    $lon += (5/120);
    $lat += (5/240);
    # not too precise
    $formatter = "%.4f";
  } else {
    # move to center of square
    $lon += 1;
    $lat += 0.5;
    # even less precise
    $formatter = "%.1f";
  }

  # not too precise
  $lat = sprintf($formatter, $lat);
  $lon = sprintf($formatter, $lon);

  return join(',', $lat, $lon);
}

sub coordToGrid {
  my $lat = shift;
  my $lon = shift;
  my $grid = "";

  $lon = $lon + 180;
  $lat = $lat + 90;

  $grid .= chr(ord('A') + int($lon / 20));
  $grid .= chr(ord('A') + int($lat / 10));
  $grid .= chr(ord('0') + int(($lon % 20)/2));
  $grid .= chr(ord('0') + int(($lat % 10)/1));
  $grid .= chr(ord('a') + int(($lon - (int($lon/2)*2)) / (5/60)));
  $grid .= chr(ord('a') + int(($lat - (int($lat/1)*1)) / (2.5/60)));

  return $grid;
}

sub qthToCoords {
  my $place = uri_escape(shift);
  #my $place = shift;
  my $lat = undef;
  my $lon = undef;
  my $url = "http://maps.googleapis.com/maps/api/geocode/xml?address=$place&sensor=false";

  open (WGET, '-|', "wget -q -O - '$url'");
  binmode(WGET, ":utf8");
  GET: while (<WGET>) {
    #print;
    chomp;
    if (/<lat>([+-]?\d+.\d+)<\/lat>/) {
      $lat = $1;
    }
    if (/<lng>([+-]?\d+.\d+)<\/lng>/) {
      $lon = $1;
    }
    if (defined($lat) and defined($lon)) {
      last GET;
    }
  }
  close WGET;

  if (defined($lat) and defined($lon)) {
    return "$lat,$lon";
  } else {
    return undef;
  }
}

sub geolocate {
  my $lat = shift;
  my $lon = shift;

  my $url = "http://maps.googleapis.com/maps/api/geocode/xml?latlng=$lat,$lon&sensor=false";

  my $newResult = 0;
  my $getnextaddr = 0;
  my $addr = undef;
  my $type = undef;

  my %results;

  open (WGET, '-|', "wget -q -O - '$url'");
  binmode(WGET, ":utf8");
  while (<WGET>) {
    #print;
    chomp;

    if (/<result>/) {
      $newResult = 1;
      next;
    }

    if ($newResult == 1 and /<type>([^<]+)</) {
      $type = $1;
      $getnextaddr = 1;
      $newResult = 0;
      next;
    }

    if ($getnextaddr == 1 and /<formatted_address>([^<]+)</) {
      #print "$type => $1\n";
      $results{$type} = $1;
      $getnextaddr = 0;
      next;
    }
  }
  close WGET;

  if (defined($results{"neighborhood"})) {
    $addr = $results{"neighborhood"};
  } elsif (defined($results{"locality"})) {
    $addr = $results{"locality"};
  } elsif (defined($results{"administrative_area_level_3"})) {
    $addr = $results{"administrative_area_level_3"};
  } elsif (defined($results{"postal_town"})) {
    $addr = $results{"postal_town"};
  } elsif (defined($results{"political"})) {
    $addr = $results{"political"};
  } elsif (defined($results{"postal_code"})) {
    $addr = $results{"postal_code"};
  } elsif (defined($results{"administrative_area_level_2"})) {
    $addr = $results{"administrative_area_level_2"};
  } elsif (defined($results{"administrative_area_level_1"})) {
    $addr = $results{"administrative_area_level_1"};
  } elsif (defined($results{"country"})) {
    $addr = $results{"country"};
  } elsif (defined($results{"sublocality"})) {
    $addr = $results{"sublocality"};
  } elsif (defined($results{"sublocality_level_3"})) {
    $addr = $results{"sublocality_level_3"};
  } elsif (defined($results{"sublocality_level_4"})) {
    $addr = $results{"sublocality_level_4"};
  }

  return $addr;
}

# vim: set ts=8 sw=2 sts=2
